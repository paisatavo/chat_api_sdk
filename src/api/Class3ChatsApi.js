/**
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Chats from '../model/Chats';
import CreateGroupAction from '../model/CreateGroupAction';
import CreateGroupStatus from '../model/CreateGroupStatus';
import GroupParticipantAction from '../model/GroupParticipantAction';
import GroupParticipantStatus from '../model/GroupParticipantStatus';
import ReadChatAction from '../model/ReadChatAction';
import ReadChatStatus from '../model/ReadChatStatus';

/**
* Class3Chats service.
* @module api/Class3ChatsApi
* @version 1.0.0
*/
export default class Class3ChatsApi {

    /**
    * Constructs a new Class3ChatsApi. 
    * @alias module:api/Class3ChatsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addGroupParticipant operation.
     * @callback module:api/Class3ChatsApi~addGroupParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupParticipantStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adding participant to a group
     * @param {module:model/GroupParticipantAction} groupParticipantAction 
     * @param {module:api/Class3ChatsApi~addGroupParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupParticipantStatus}
     */
    addGroupParticipant(groupParticipantAction, callback) {
      let postBody = groupParticipantAction;
      // verify the required parameter 'groupParticipantAction' is set
      if (groupParticipantAction === undefined || groupParticipantAction === null) {
        throw new Error("Missing the required parameter 'groupParticipantAction' when calling addGroupParticipant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GroupParticipantStatus;
      return this.apiClient.callApi(
        '/addGroupParticipant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demoteGroupParticipant operation.
     * @callback module:api/Class3ChatsApi~demoteGroupParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupParticipantStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Demote group participant
     * @param {module:model/GroupParticipantAction} groupParticipantAction 
     * @param {module:api/Class3ChatsApi~demoteGroupParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupParticipantStatus}
     */
    demoteGroupParticipant(groupParticipantAction, callback) {
      let postBody = groupParticipantAction;
      // verify the required parameter 'groupParticipantAction' is set
      if (groupParticipantAction === undefined || groupParticipantAction === null) {
        throw new Error("Missing the required parameter 'groupParticipantAction' when calling demoteGroupParticipant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GroupParticipantStatus;
      return this.apiClient.callApi(
        '/demoteGroupParticipant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChats operation.
     * @callback module:api/Class3ChatsApi~getChatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Chats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the chat list.
     * The chat list includes avatars.
     * @param {module:api/Class3ChatsApi~getChatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Chats}
     */
    getChats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Chats;
      return this.apiClient.callApi(
        '/dialogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the group operation.
     * @callback module:api/Class3ChatsApi~groupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGroupStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a group and sends the message to the created group.
     * The group will be added to the queue for sending and sooner or later it will be created, even if the phone is disconnected from the Internet or the authorization is not passed.   2 Oct 2018 update: chatId parameter will be returned if group was created on your phone within 20 second.
     * @param {module:model/CreateGroupAction} createGroupAction 
     * @param {module:api/Class3ChatsApi~groupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGroupStatus}
     */
    group(createGroupAction, callback) {
      let postBody = createGroupAction;
      // verify the required parameter 'createGroupAction' is set
      if (createGroupAction === undefined || createGroupAction === null) {
        throw new Error("Missing the required parameter 'createGroupAction' when calling group");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGroupStatus;
      return this.apiClient.callApi(
        '/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promoteGroupParticipant operation.
     * @callback module:api/Class3ChatsApi~promoteGroupParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupParticipantStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make participant in the group an administrator
     * @param {module:model/GroupParticipantAction} groupParticipantAction 
     * @param {module:api/Class3ChatsApi~promoteGroupParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupParticipantStatus}
     */
    promoteGroupParticipant(groupParticipantAction, callback) {
      let postBody = groupParticipantAction;
      // verify the required parameter 'groupParticipantAction' is set
      if (groupParticipantAction === undefined || groupParticipantAction === null) {
        throw new Error("Missing the required parameter 'groupParticipantAction' when calling promoteGroupParticipant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GroupParticipantStatus;
      return this.apiClient.callApi(
        '/promoteGroupParticipant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readChat operation.
     * @callback module:api/Class3ChatsApi~readChatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReadChatStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open chat for reading messages
     * Use this method to make users see their messages read.
     * @param {module:model/ReadChatAction} readChatAction 
     * @param {module:api/Class3ChatsApi~readChatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReadChatStatus}
     */
    readChat(readChatAction, callback) {
      let postBody = readChatAction;
      // verify the required parameter 'readChatAction' is set
      if (readChatAction === undefined || readChatAction === null) {
        throw new Error("Missing the required parameter 'readChatAction' when calling readChat");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = ReadChatStatus;
      return this.apiClient.callApi(
        '/readChat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGroupParticipant operation.
     * @callback module:api/Class3ChatsApi~removeGroupParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupParticipantStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove participant from a group
     * @param {module:model/GroupParticipantAction} groupParticipantAction 
     * @param {module:api/Class3ChatsApi~removeGroupParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupParticipantStatus}
     */
    removeGroupParticipant(groupParticipantAction, callback) {
      let postBody = groupParticipantAction;
      // verify the required parameter 'groupParticipantAction' is set
      if (groupParticipantAction === undefined || groupParticipantAction === null) {
        throw new Error("Missing the required parameter 'groupParticipantAction' when calling removeGroupParticipant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GroupParticipantStatus;
      return this.apiClient.callApi(
        '/removeGroupParticipant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
