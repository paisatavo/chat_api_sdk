/**
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClearActionsQueueStatus from '../model/ClearActionsQueueStatus';
import ClearMessagesQueueStatus from '../model/ClearMessagesQueueStatus';
import OutboundActions from '../model/OutboundActions';
import OutboundMessages from '../model/OutboundMessages';

/**
* Class5Queues service.
* @module api/Class5QueuesApi
* @version 1.0.0
*/
export default class Class5QueuesApi {

    /**
    * Constructs a new Class5QueuesApi. 
    * @alias module:api/Class5QueuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clearActionsQueue operation.
     * @callback module:api/Class5QueuesApi~clearActionsQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClearActionsQueueStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear outbound actions queue.
     * This method is needed when you accidentally sent thousands of actions in a row.
     * @param {module:api/Class5QueuesApi~clearActionsQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClearActionsQueueStatus}
     */
    clearActionsQueue(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClearActionsQueueStatus;
      return this.apiClient.callApi(
        '/clearActionsQueue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clearMessagesQueue operation.
     * @callback module:api/Class5QueuesApi~clearMessagesQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClearMessagesQueueStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear outbound messages queue.
     * This method is needed when you accidentally sent thousands of messages in a row.
     * @param {module:api/Class5QueuesApi~clearMessagesQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClearMessagesQueueStatus}
     */
    clearMessagesQueue(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClearMessagesQueueStatus;
      return this.apiClient.callApi(
        '/clearMessagesQueue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showActionsQueue operation.
     * @callback module:api/Class5QueuesApi~showActionsQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutboundActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get outbound messages queue.
     * When you create an action, all actions are queued up. If an action is not executed, it remains in the queue and will be sent for execution in time. again. The action cannot be executed due to the status of the device connected to the account.  This method give the last 100 actions in the queue.
     * @param {module:api/Class5QueuesApi~showActionsQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutboundActions}
     */
    showActionsQueue(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OutboundActions;
      return this.apiClient.callApi(
        '/showActionsQueue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showMessagesQueue operation.
     * @callback module:api/Class5QueuesApi~showMessagesQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutboundMessages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get outbound messages queue.
     * When sending messages, all messages are in the queue. If the message is not sent, then it remains in the queue and in time it will be sent again. The message may not be sent due to the status of the device connected to the account.   This method give the last 100 messages in the queue.
     * @param {module:api/Class5QueuesApi~showMessagesQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutboundMessages}
     */
    showMessagesQueue(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OutboundMessages;
      return this.apiClient.callApi(
        '/showMessagesQueue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
