/**
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BanSettings from '../model/BanSettings';
import BanTestAction from '../model/BanTestAction';
import BanTestStatus from '../model/BanTestStatus';

/**
* Class6Ban service.
* @module api/Class6BanApi
* @version 1.0.0
*/
export default class Class6BanApi {

    /**
    * Constructs a new Class6BanApi. 
    * @alias module:api/Class6BanApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the banTest operation.
     * @callback module:api/Class6BanApi~banTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BanTestStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test ban settings
     * Send the phone number to find out if the instance is banning it
     * @param {module:model/BanTestAction} banTestAction 
     * @param {module:api/Class6BanApi~banTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BanTestStatus}
     */
    banTest(banTestAction, callback) {
      let postBody = banTestAction;
      // verify the required parameter 'banTestAction' is set
      if (banTestAction === undefined || banTestAction === null) {
        throw new Error("Missing the required parameter 'banTestAction' when calling banTest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = BanTestStatus;
      return this.apiClient.callApi(
        '/banTest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBanSettings operation.
     * @callback module:api/Class6BanApi~getBanSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BanSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get settings
     * **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
     * @param {module:api/Class6BanApi~getBanSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BanSettings}
     */
    getBanSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BanSettings;
      return this.apiClient.callApi(
        '/banSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setBanSettings operation.
     * @callback module:api/Class6BanApi~setBanSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BanSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set settings
     * **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
     * @param {module:model/BanSettings} banSettings 
     * @param {module:api/Class6BanApi~setBanSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BanSettings}
     */
    setBanSettings(banSettings, callback) {
      let postBody = banSettings;
      // verify the required parameter 'banSettings' is set
      if (banSettings === undefined || banSettings === null) {
        throw new Error("Missing the required parameter 'banSettings' when calling setBanSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['instanceId', 'token'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = BanSettings;
      return this.apiClient.callApi(
        '/banSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
