/**
 * Chat API SDK
 * The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sale@chat-api.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChatApiSdk);
  }
}(this, function(expect, ChatApiSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChatApiSdk.Class1InstanceApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Class1InstanceApi', function() {
    describe('expiry', function() {
      it('should call expiry successfully', function(done) {
        //uncomment below and update the code to test expiry
        //instance.expiry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQRCode', function() {
      it('should call getQRCode successfully', function(done) {
        //uncomment below and update the code to test getQRCode
        //instance.getQRCode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSettings', function() {
      it('should call getSettings successfully', function(done) {
        //uncomment below and update the code to test getSettings
        //instance.getSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatus', function() {
      it('should call getStatus successfully', function(done) {
        //uncomment below and update the code to test getStatus
        //instance.getStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logout', function() {
      it('should call logout successfully', function(done) {
        //uncomment below and update the code to test logout
        //instance.logout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reboot', function() {
      it('should call reboot successfully', function(done) {
        //uncomment below and update the code to test reboot
        //instance.reboot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retry', function() {
      it('should call retry successfully', function(done) {
        //uncomment below and update the code to test retry
        //instance.retry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setSettings', function() {
      it('should call setSettings successfully', function(done) {
        //uncomment below and update the code to test setSettings
        //instance.setSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('takeover', function() {
      it('should call takeover successfully', function(done) {
        //uncomment below and update the code to test takeover
        //instance.takeover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
